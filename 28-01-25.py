# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NFy4MBppkEa1IQ7JryEokh5wSTR0bswF
"""

import numpy as np

arr=np.array([[[1,2,3], [4,5,6]],[[7,8,9], [10,11,12]]])
print(arr)
print(arr[1,1,2])

import pandas as pd

sales_data = {
    'TransactionID': [1, 2, 3, 4, 5],
    'customerID': [101, 102, 103, 104, 105],
    'Amount': [250, 300, 400, 500, 600],
    'Date': ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05']
}
customer_data = {
    'customerID': [101, 102, 103, 104],
    'customerName': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [30, 35, 40, 25],
    'city': ['New York', 'Los Angeles', 'Chicago', 'Houston']
}

sales_df = pd.DataFrame(sales_data)
customer_df = pd.DataFrame(customer_data)

print("Sales DataFrame: ")
print(sales_df.head())

print("\nShape of sales data: ", sales_df.shape)

print("\nSales data statistics: ")
print(sales_df.describe())

merged_df = pd.merge(sales_df, customer_df, on='customerID', how='inner')
print("\nMerged DataFrame:")
print(merged_df)

print("\nAccess data using 'loc' (row 1):")
print(merged_df.loc[1])

print("\nAccess data using 'iloc' (row 2):")
print(merged_df.iloc[2])

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
datf=pd.DataFrame({"Season 1": [7,4,5,63],
              "Season 2": [1,2,8,4]})
p=sns.histplot(data = datf)
p.set(xlabel=" X Label Value", ylabel="Y Label Value")
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'semester':['sem1','sem1','sem1','sem1','sem1','sem2','sem2','sem2','sem2','sem2'],
    'hours_studies':[5,8,10,4,6,9,11,7,12,8]
}
df=pd.DataFrame(data)
plt.figure(figsize=(8,6))
sns.boxplot(x='semester',y='hours_studies',data=df)

plt.title('Student performance: Hours of study per semester')
plt.xlabel('Semester')
plt.ylabel('Hours of study')
plt.show()

import pandas as pd
data = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]})
Q1 = data['value'].quantile(0.25)
Q3 = data['value'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = data[(data['value'] < lower_bound) | (data['value'] > upper_bound)]
print(outliers)

solution:
Given:23,42,12,10,15,14,9
Arrange the dataset in ascending order.
9,10,12,14,15,23,41
Hence,

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

np.random.seed(10)
data = pd.DataFrame({
    'value':np.concatenate([np.random.normal(0, 1, 100), np.random.normal(0, 1, 10)]),
})
Q1 = data['value'].quantile(0.25)
Q3 = data['value'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = data[(data['value'] < lower_bound) | (data['value'] > upper_bound)]
print(f'Outliers based on Box Plot Criteria:\n{outliers}')
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(x=data['value'])
plt.title('Box Plot of Data')
plt.subplot(1, 2, 2)
sns.histplot(data['value'], kde=True)
plt.title('Histogram of Data')
plt.tight_layout()
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
data = {
  "age": [25,30,35,40,45],
  "height": [150,160,170,180,190],
  "weight":[50,60,70,80,90]
}
df=pd.DataFrame(data)
print("Original Dataframe:")
print(df)
scaler=MinMaxScaler()
normalized_data=scaler.fit_transform(df)
normalized_df=pd.DataFrame(normalized_data,columns=df.columns)
print("\nNormalized Dataframe (scaled to range [0,1]):")
print(normalized_df)

import pandas as pd
from sklearn.preprocessing import StandardScaler
data = {
  "age": [25,30,35,40,45],
  "height": [150,160,170,180,190],
  "weight":[50,60,70,80,90]
}
df=pd.DataFrame(data)
print("Original Dataframe:")
print(df)
scaler=StandardScaler()
StandardScaler_data=scaler.fit_transform(df)
StandardScaler_df=pd.DataFrame(StandardScaler_data,columns=df.columns)
print("\nStandardScaler Dataframe (scaled to range [0,1]):")
print(StandardScaler_df)

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder

data = {
    "customer_id": [1, 2, 3, 4, 5],
    "gender": ["male", "female", "male", "female", "male"],
    "city": ["Hyderabad", "pune", "banglore", "chennai","mumbai"],
    "fruits":["Apple", "orange", "kiwi", "banana", "mango"]

}
df = pd.DataFrame(data)
print("Original Dataframe:")
print(df)
one_hot_encoder = OneHotEncoder(sparse_output=False)
columns_to_encode = ["gender", "city","fruits"]
encoded_data = one_hot_encoder.fit_transform(df[columns_to_encode])
encoded_columns = one_hot_encoder.get_feature_names_out(columns_to_encode)
encoded_df = pd.DataFrame(encoded_data, columns=encoded_columns)
df = pd.concat([df, encoded_df], axis=1)
df = df.drop(columns=columns_to_encode)
print("\nEncoded Dataframe:")
print(df)

